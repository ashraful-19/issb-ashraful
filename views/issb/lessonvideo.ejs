<%- include('../partials/header.ejs') %>
<style>
	.con {
  position: relative;
  bottom: -10px;
  height: auto;
  border: none;
 background-color: f4f4f461;
  
}
.accordion-content {
max-height: 100%;
position:relative;
 top:-5px;
transition: max-height 0.3s ease-in-out;
background-color: #f4f4f461;
display: flex;
flex-direction: column;

 border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;


}
.accordion-content a{
  
  width: 100%;
  font-size: 14px;
  color: #737373;
  border:none!important;
  padding: 15px 20px!important;
  width:98%;
  margin: 0px auto 0px!important;
}
.accordion-content a:hover{
  background:#ededed;
  cursor: pointer;
}

.accordion-content a:last-child{
margin-bottom:10px;
}
.accordion-content a:first-child{
margin-top:10px;
}


.accordion img{
  width: 22px;
  margin-right: 10px;
}
.video-active:hover:focus{
  background-color: black;
  color:white;
}
</style>

  <div class="video-main-box" style="z-index: 12;">
    <div class="video-container-lesson">
        <iframe id="video-iframe" width="100%" height="100%" src="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media;" allowfullscreen></iframe>
    </div>
</div>

  <section class="con">
        <div class="accordion-content" id="content-container">
        </div>
</section>


<br><br><br><br>


<script>


const contentData = {
  "IQ": [
  {
      "type": "video",
      "title": "Intro to IQ Video",
      "link": "https://player.vimeo.com/video/855932385"
    },
    {
      "type": "video",
      "title": "Advanced IQ Video",
      "link": "https://www.youtube.com/iq_advanced"
    },
    {
      "type": "pdf",
      "title": "IQ Guide PDF",
      "link": "https://www.example.com/iq_guide.pdf"
    }
    // Add more items for IQ if needed
  ],
  "PPDT": [
  {
      "type": "video",
      "title": "PPDT Basics",
      "link": "https://www.youtube.com/embed/iXDbt2EHOGw"
    },
    {
      "type": "video",
      "title": "PPDT Strategies",
      "link": "https://www.youtube.com/ppdt_strategies"
    },
    {
      "type": "pdf",
      "title": "PPDT Tips PDF",
      "link": "https://www.example.com/ppdt_tips.pdf"
    },    {
      "type": "video",
      "title": "PPDT Basics",
      "link": "https://www.youtube.com/embed/iXDbt2EHOGw"
    },
    {
      "type": "video",
      "title": "PPDT Strategies",
      "link": "https://www.youtube.com/ppdt_strategies"
    },
    {
      "type": "pdf",
      "title": "PPDT Tips PDF",
      "link": "https://www.example.com/ppdt_tips.pdf"
    }
    // Add more items for PPDT if needed
  ],
  "Essay Writing": [
    // Add items for Essay Writing
  ],
  "Incomplete Story": [
    // Add items for Incomplete Story
  ],
  "Picture Story": [
    // Add items for Picture Story
  ],
  "Incomplete Sentences": [
    // Add items for Incomplete Sentences
  ],
  "WAT": [
    // Add items for WAT
  ],
  "Memorable Bitter": [
    // Add items for Memorable Bitter
  ],
  "Self Criticism": [
    // Add items for Self Criticism
  ],
  "Self Assessment": [
    // Add items for Self Assessment
  ],
  "Biodata": [
    // Add items for Biodata
  ],
  "Group Discussion": [
  {
      "type": "video",
      "title": "Group Discussion Tips",
      "link": "https://www.youtube.com/embed/hp9eUYicGMw"
    },
    {
      "type": "video",
      "title": "Effective Communication in GD",
      "link": "https://player.vimeo.com/video/855932385"
    },
    {
      "type": "pdf",
      "title": "GD Handbook PDF",
      "link": "https://www.example.com/gd_handbook.pdf"
    },
    {
      "type": "exam",
      "title": "Sample GD Exam",
      "link": "https://www.example.com/sample_gd_exam"
    },{
      "type": "video",
      "title": "Group Discussion Tips",
      "link": "https://www.youtube.com/embed/hp9eUYicGMw"
    },
    {
      "type": "video",
      "title": "Effective Communication in GD",
      "link": "https://www.youtube.com/gd_communication"
    },
    {
      "type": "pdf",
      "title": "GD Handbook PDF",
      "link": "https://www.example.com/gd_handbook.pdf"
    },
    {
      "type": "exam",
      "title": "Sample GD Exam",
      "link": "https://www.example.com/sample_gd_exam"
    },{
      "type": "video",
      "title": "Group Discussion Tips",
      "link": "https://www.youtube.com/embed/hp9eUYicGMw"
    },
    {
      "type": "video",
      "title": "Effective Communication in GD",
      "link": "https://www.youtube.com/gd_communication"
    }
    // Add more items for GD if needed
  ],
  "PGT": [
    // Add items for PGT
  ],
  "HGT": [
    // Add items for HGT
  ],
  "Extempore Speech": [
    // Add items for Extempore Speech
  ],
  "PAT": [
    // Add items for PAT
  ],
  "Medical": [
    // Add items for Medical
  ],
  "DP Viva": [
    // Add items for DP Viva
  ],
  "Planning Exercise": [
    // Add items for Planning Exercise
  ],
  "GTO Viva": [
    // Add items for GTO Viva
  ],
  "Psychometrics Test": [
    // Add items for Psychometrics Test
  ],
  "Command Task": [
    // Add items for CT
  ],
  "Mutual Assessment": [
    // Add items for CT
  ],
  "Medical": [
    // Add items for CT
  ]

};








  // Function to generate HTML based on content type
  function generateContentHTML(contentList) {
    return contentList.map(item => {
      let iconClass = '';
      let linkClass = '';

      if (item.type === 'video') {
        iconClass = 'fa-solid fa-play';
        linkClass = 'video';
      } else if (item.type === 'pdf') {
        iconClass = 'fa-regular fa-file-lines';
        linkClass = 'pdf';
      } else if (item.type === 'exam') {
        iconClass = 'fa-solid fa-file-lines';
        linkClass = 'exam';
      }

      return `
        <a href="${item.link}" class="${linkClass}">
          <i class="${iconClass}"></i>&nbsp;&nbsp;&nbsp;${item.title}
        </a>
      `;
    }).join('');
  }

  // Function to render content based on type
  function renderContent(type) {
    const contentContainer = document.getElementById('content-container');
    const contentList = contentData[type];

    if (contentList) {
      const contentHTML = generateContentHTML(contentList);
      contentContainer.innerHTML = contentHTML;
    } else {
      contentContainer.innerHTML = 'No content available for this type.';
    }
  }

  // Call renderContent with the desired type (e.g., "IQ")
  renderContent('<%= content %>');




  function renderFirstVideo(category) {
  // Check if the category exists in contentData
  if (contentData.hasOwnProperty(category)) {
    const videos = contentData[category].filter(item => item.type === "video");

    // Check if there are any videos in the category
    if (videos.length > 0) {
      const firstVideoLink = videos[0].link;
      const videoElement = document.getElementById("video-iframe");

      if (videoElement) {
        videoElement.src = firstVideoLink+"?autoplay=1";

        // Assuming you have an HTML element with class "video" for the video links
        const videoLinks = document.querySelectorAll('.video');

        // Remove 'video-active' class from all video links
        videoLinks.forEach(link => {
          link.classList.remove('video-active');
        });

        // Add 'video-active' class to the first video link
        if (videoLinks.length > 0) {
          videoLinks[0].classList.add('video-active');
        }
      } else {
        console.error("Element with id 'video-iframe' not found.");
      }
    } else {
      console.error("No videos found in the specified category.");
    }
  } else {
    console.error("Category not found in contentData.");
  }
}

// Example usage:
renderFirstVideo('<%= content %>');

</script>




 <!-- bottom nagivatoin section  -->

 <%- include('../partials/bottom-nav.ejs') %>

 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
const videoIframe = document.querySelector('#video-iframe');
const con = document.querySelector('.con');

function setMarginTop() {
  con.style.marginTop = videoIframe.offsetHeight + 'px';
}

setMarginTop(); // initial setting

window.addEventListener('resize', setMarginTop);


</script>




<script>
  const videoLinks = document.querySelectorAll('.video');
  const videoIframe1 = document.getElementById('video-iframe');
  let activeVideoLink = null;

  videoLinks.forEach(link => {
    link.addEventListener('click', function(event) {
      event.preventDefault();

      // Remove the active class from the previously clicked link
      if (activeVideoLink) {
        activeVideoLink.classList.remove('video-active');
      }

      // Add the active class to the clicked link
      this.classList.add('video-active');
      activeVideoLink = this;

      const videoUrl = this.getAttribute('href');
      // Update the iframe source to the video URL
      videoIframe1.src = videoUrl+'?autoplay=1';
    });
  });
</script>






